#############
### MONZO ###
#############

alias listemulators='~/Library/Android/sdk/emulator/emulator -list-avds'
alias openemulator='~/Library/Android/sdk/emulator/emulator -avd Pixel_8_API_34'
alias emulator='openemulator'

# Monzo Setup
export GOPATH=$HOME
export PATH="/opt/homebrew/opt/go@1.22/bin:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh" # This loads nvm
[ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && . "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion
[ -f ${GOPATH}/src/github.com/monzo/starter-pack/zshrc ] && source $GOPATH/src/github.com/monzo/starter-pack/zshrc

# Android Studio setup
export JAVA_HOME=$(/usr/libexec/java_home -v 19)
export PATH="$PATH:${HOME}/Library/Android/sdk/platform-tools"
# ANDROID_HOME is used by gradle when an sdk path is not specified in another way
export ANDROID_HOME="$HOME/Library/Android/sdk"
export PATH="$ANDROID_HOME/emulator":"$ANDROID_HOME/tools":"$ANDROID_HOME/platform-tools":$PATH
# export ANDROID_HOME="/opt/homebrew/share/android-commandlinetools"
# export ANDROID_SDK_ROOT=$ANDROID_HOME
# export ANDROID_AVD_HOME="${HOME}/.android/avd"
# export PATH="$PATH:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/tools/bin"

# ex: adblogin mk70ap3k8oadf9cnmvnisoudg@testing.monzo.com
function adblogin() {
    droid deeplink $(Â£ -e s101 "api get /nonprod.test-user-email-log/magic-link recipient_email==\"$1\"" | jq .link -r);
}

eval "$(rbenv init -)"

# Added by Toolbox App
export PATH="$PATH:/Users/jacobroberts/Library/Application Support/JetBrains/Toolbox/scripts"

# Created by `pipx` on 2024-06-02 21:39:55
export PATH="$PATH:/Users/jacobroberts/.local/bin"

alias tg='mise x -- tuist generate'
alias ti='mise x -- tuist install'

iosdeeplink() {
  if [[ $# -lt 1 ]]; then
    echo "Usage: iosdeeplink <url>"
    return 1
  fi

  # Get the list of booted devices
  local booted_devices
  booted_devices=$(xcrun simctl list devices -j | jq -c '[.devices[] | .[] | select(.state == "Booted") | {name: .name, udid: .udid}]')

  # Count the number of booted devices
  local booted_count
  booted_count=$(echo "$booted_devices" | jq 'length')

  if (( booted_count == 0 )); then
    echo "No devices in 'Booted' state."
    return 1
  elif (( booted_count == 1 )); then
    # Extract the single device's name
    local name
    name=$(echo "$booted_devices" | jq -r '.[0].name')

    echo "ðŸ”— Launching deeplink on device $name: $1"
    xcrun simctl openurl "$name" "$1"
  else
    echo "Multiple booted devices found:"
    # Display a numbered list of booted devices
    local i=1
    echo "$booted_devices" | jq -r '.[] | .name' | while read -r name; do
      echo "$i - $name"
      i=$((i + 1))
    done

    # Prompt the user to select a device by number
    echo -n "Enter the number of the device to use: "
    local selected_index
    read -r selected_index

    # Validate the selected index
    if ! [[ "$selected_index" =~ ^[0-9]+$ ]] || (( selected_index < 1 || selected_index > booted_count )); then
      echo "Invalid selection: $selected_index"
      return 1
    fi

    # Get the selected device's name
    local selected_name
    selected_name=$(echo "$booted_devices" | jq -r --argjson idx "$((selected_index - 1))" '.[$idx].name')

    echo "ðŸ”— Launching deeplink on device $selected_name: $1"
    xcrun simctl openurl "$selected_name" "$1"
  fi
}
